			A Datamodel for PFS
			===================

(The cognoscenti will recognise certain similarities to the SDSS model,
    http://data.sdss3.org/datamodel/files/BOSS_SPECTRO_REDUX/RUN2D/PLATE4
)

There are implementations of python classes that represent many of the files in this document, supporting
reading and writing FITS files that conform to this model.  To use them, add the python directory in this
package to your $PYTHONPATH and import e.g. pfs.datamodel.pfsConfig


I shall use these symbolic names in the discussion:

NFIBER      The number of fibres in a spectrograph (some spectrographs have "missing" fibres)
NCOLUMN     The number of columns in our detectors (different for CCDs and HgCgTe?)
NROW        The number of rows that spectra extend over in the dispersion direction.
	    In practice, the number of rows in the usable part of the CCD.
NSIMROW     Number of rows for simulated data.  May be different in different files, depending
	    on the desired oversampling.
NCOARSE     Number of wavelengths used in computing the coarse 
      (low-resolution) covariance matrix of the spectra

The values of NCOLUMN and NROW may be different in the optical and IR arms, and will differ for
raw and reduced data.  Possible values are given in the section, "Parameters"

In various places I refer to a SHA-1, which is a strong 160-bit hash, as used by e.g. git
(https://en.wikipedia.org/wiki/SHA-1).  We truncate these hashes to 63bits (so as to fit
in standard 64-bit signed integers). Sixty-three bits would produce up to 2^63 ~ 9e18 values. 
These SHA-1 values are encoded into 16 hexadecimal digits in filenames.  
In filenames, hexadecimal characters shall be
written in lower case (0x12345abcdef not 0X12345ABCDEF or 0x12345ABCDEF).

The following variables are used in filename formats (which are written in python notation):

site
  J: JHU
  L: LAM
  X: Subaru offline
  I: IPMU
  A: ASIAA
  S: Summit
  P: Princeton
  F: simulation (fake)

category (camera)
  A: Science
  B: UTR (Up The Ramp)
  C: Metrology Camera
  D: Auto-guider

visit
  An incrementing exposure number, unique at any site

spectrograph
  1-4

armNum
  1:  Blue
  2:  Red
  3:  IR
  4:  Medium resolution red
(used only in raw filenames)

arm
  b: Blue
  r: Red
  n: IR
  m: Medium resolution red

tract
  An integer in the range (0, 99999) specifying an area of the sky

patch
  A string of the form "m,n" specifying a region within a tract

objId
  A unique 64-bit object ID for an object.  For example, the HSC object ID from the database.

  objIds are written out using %016x formats for compactness reasons.

catId
  A small integer specifying the source of the objId.  Currently only
    0: Simulated
    1: HSC
  are defined.

pfsDesignId
  An integer uniquely specifying the configuration of the PFI; specifically a SHA-1 of the
  (fiberId, ra, dec) tuples (with position rounded to the nearest arcsecond) truncated to 64 bits.

  See calculate_pfsDesignId() in
	python/pfs/datamodel/utils.py

  We include the standard prefix "0x" in filenames to visually separate SHA-1s from 64-bit objId; this is
  especially important in pfsObject filenames which have both an objId and a hash.

  An alternative to a SHA-1 would be the visit number of the first data taken with this configuration but that
  would have the disadvantage that it would not be available until the data was taken.

  Lab data may choose to set the pfsDesignId to 0x0.  As a convenience to simulators, if the fiberIds
  in a pfsConfig file are consecutive integers starting at 1 and all ra/dec values are 0.0 the pfsDesignId
  is taken to be 0x0

pfsVisitHash

  An integer uniquely defining the set of visits contributing to a reduced spectrum;
  this will be calculated as a SHA-1 truncated to 64 bits
  See calculate_pfsVisitHash() in
	python/pfs/datamodel/utils.py

As a special case, if the only visit is 0, pfsVisitHash shall be taken to be 0x0 for the convenience
of simulation code.

MaskedImage

  A data type which consists of three images:
     A floating point image
     An integer mask image
     A floating point variance image

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

Raw Data (from the spectrograph cameras, but also e.g. the metrology camera)

   "PF%1s%1s%06d%1d%1d.fits" % (site, category, visit, spectrograph, armNum)

Format: as written by the DAQ system.  I believe that the "A" (science) frames are currently a single image
extension of size > NCOLUMN*NROW due to extended registers and overclocks, even for the red and blue arms
which are physically two devices.

N.b. the restriction to filenames of the form 4 letters followed by 8 decimal digits comes from Subaru.

Note that the order of the last two numbers is "spectrograph, armNum" whereas in all other filenames
we use the order "arm, spectrograph" but now arm is a string (e.g. r2, n4).

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

Calibration products (i.e. processed flats/biases/darks ready to be used in processing)

   "pfsFlat-%s-%06d-%1s%1d.fits" % (calibDate, visit0, arm, spectrograph)
   "pfsBias-%s-%06d-%1s%1d.fits" % (calibDate, visit0, arm, spectrograph)
   "pfsDark-%s-%06d-%1s%1d.fits" % (calibDate, visit0, arm, spectrograph)

(While theoretically we don't need to distinguish between the r and m chips, it's simpler to be
consistent, so we will have 16, not 12, biases/darks for the complete spectrograph)

Visit0 is the first visit for which these flats/biases/darks are valid; in general
there will be many files for each (arm, spectrograph) but with different values of visit0.  Note that we
don't know the upper range of validity when these files are created, so it cannot be encoded in the filename.

Visit0 is usually the last input visit used in preparing the calibration files. The calibration file that is
used by the pipeline is selected based on a list of valid dates provided to the calibration database; visit0
is only used to provide a unique filename and a sensible sort order.

Single extension fits files of size NCOLUMN*NROW

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

The profile of fibers in the 2-D flat-field image:

  "pfsFiberProfiles-%s-%06d-%1s%1d.fits" % (calibDate, visit0, arm, spectrograph)

Note that visit0 is defined under "Calibration products"

For each fiber, an empirical, oversampled profile (in the spatial dimension, columns) is recorded for several
positions along the fiber trace in the spectral dimension (rows).

HDU #0 PDU
HDU #1 FIBERS     Profile parameters for each fiber              [BINARY FITS TABLE]   NFIBER
HDU #2 PROFILES   Profile measurements                           [BINARY FITS TABLE]   NPROFILES

Profile parameters in the FIBERS HDU are:
        fiberId     32-bit int              Fiber identifier (primary key)
        radius      32-bit int              Half-size of profiles, in native pixels
        oversample  32-bit float            Oversampling factor (> 1)
        norm        32-bit float vector     Normalisation to apply to extracted spectra

Profile measurements in the PROFILES HDU are:
        fiberId     32-bit int              Fiber identifier (primary key)
        rows        32-bit float            Detector row at which the profile is measured (primary key)
        profiles    32-bit float vector     Measured profile
        masks       boolean vector          Whether values in the profiles should be used (1 = don't use)

The length of a profile (and mask) vector is: int(2*(radius + 1)*oversample) + 1.

The PDU has keys to define which data were used to construct the FiberTrace:
   SPECTROGRAPH       Which spectrograph
   ARM                The arm of the spectrograph
   CALIB_INPUT_%d     Visits which were used
I.e. if only visit 5830 were used, the r1 file would have ARM='r', SPECTROGRAPH=1, CALIB_INPUT_0=5830

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

The mapping of fiberId,wavelength to x,y on the detector:

  "pfsDetectorMap-%06d-%s%1d.fits" % (visit0, arm, spectrograph)

Note that visit0 is defined under "Calibration products"

We have two separate formats for representing the "detectorMap", which are distinguished by the value of the
"HIERARCH pfs_detectorMap_class" header card:
* SplinedDetectorMap: splines for each fiber provide the wavelength and column as a function of row.
* GlobalDetectorMap: a direct mapping of fiberId,wavelength to column,row position.

SplinedDetectorMap format:

HDU #0 PDU
HDU #1 FIBERID      Identifier of each fiber                [32-bit INT]            NFIBER
HDU #2 SLITOFF      Slit offsets in x,y,z                   [32-bit FLOAT]          3*NFIBER
HDU #3 CENTER       Spline for column with trace center     [BINARY FITS TABLE]     NFIBER
HDU #4 WAVELENGTH   Spline for wavelength (nm)              [BINARY FITS TABLE]     NFIBER

The primary header records the dimensions of the detector in the MINX,MINY,MAXX,MAXY keywords,
and the polynomial order of the distortion field in the ORDER keyword.

The CENTER and WAVELENGTH tables contain:
        index       64-bit int          Index of fiber (primary key)
        knot        32-bit float        Row value of knot (primary key)
        value       32-bit float        Corresponding value at knot


GlobalDetectorMap format:

HDU #0 PDU
HDU #1 FIBERS       Details of individual fibers            [BINARY FITS TABLE]     NFIBER
HDU #2 COEFFICIENTS Distortion coefficients                 [BINARY FITS TABLE]     NCOEFF
HDU #3 RIGHTCCD     Coefficients for right-hand CCD         [BINARY FITS TABLE]     6


The primary header records the dimensions of the detector in the MINX,MINY,MAXX,MAXY keywords.
It also contains the following HIERARCH keywords which are used in scaling the fiberId,wavelength values:
        scaling.fiberPitch
        scaling.dispersion
        scaling.wavelengthCenter
        scaling.minFiberId
        scaling.maxFiberId
        scaling.height
        scaling.buffer

The FIBERS table contains:
        fiberId             32-bit int      Fiber identifier (primary key)
        spatialOffsets      32-bit float    Offset in spatial dimension (x)
        spectralOffsets     32-bit float    Offset in spectral dimension (y)

The COEFFICIENTS table contains:
        x                   32-bit float    x coefficients
        y                   32-bit float    y coefficients

The RIGHTCCD table contains:
        coeff               32-bit float    Affine transform coefficients


-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

The design of a PFI setup, i.e., the targetting of fibers, is a PfsDesign:

    "pfsDesign-0x%016x.fits" % (pfsDesignId)

The choice of a hex format is because the the pfsDesignId is a SHA-1
of the intended fiber positions.

FITS file format:

HDU #0 PDU
HDU #1          FITS binary table named "DESIGN"
HDU #1          FITS binary table named "PHOTOMETRY"

The PDU has keys indicating the intended pointing of the telescope boresight.

      RA        Intended telescope boresight Right Ascension (degrees)
      DEC       Intended telescope boresight Declination (degrees)
      ARMS      The arms that will be exposed (eg., 'brn')

The DESIGN table lists for each object:
      fiberId        32-bit int
      catId          32-bit int
      tract          32-bit int
      patch          string
      objId          64-bit int
      ra             64-bit float (degrees)
      dec            64-bit float (degrees)
      targetType     32-bit int (enumerated type: SCIENCE,SKY,FLUXSTD,UNASSIGNED,ENGINEERING)
      fiberStatus    32-bit int (enumerated type: GOOD,BROKENFIBER,BLOCKED,BLACKSPOT,UNILLUMINATED)
      pfiNominal     pair of 32-bit floats (microns on the PFI)

N.b. fiberIds start at 1.

The 'targetType' in the DESIGN table is an enumerated type, with values:
      SCIENCE = 1: the fiber is intended to be on a science target.
      SKY = 2: the fiber is intended to be on blank sky, and used for sky subtraction.
      FLUXSTD = 3: the fiber is intended to be on a flux standard, and used for flux calibration.
      UNASSIGNED = 4: the fiber is not targeted on anything in particular.
      ENGINEERING = 5: the fiber is an engineering fiber.

The 'fiberStatus' in the DESIGN table is an enumerated type, with values:
      GOOD = 1: the fiber is working normally.
      BROKENFIBER = 2: the fiber is broken, and any flux should be ignored.
      BLOCKED = 3: the transmission through the fiber is temporarily blocked. Any flux should be ignored.
      BLACKSPOT = 4: the fiber is hidden behind its spot, and any flux should be ignored.
      UNILLUMINATED = 5: the fiber is not being illuminated.

The PHOTOMETRY table lists:
      fiberId            32-bit int
      fiberFlux    [nJy] 32-bit float
      psfFlux      [nJy] 32-bit float
      totalFlux    [nJy] 32-bit float
      fiberFluxErr [nJy] 32-bit float
      psfFluxErr   [nJy] 32-bit float
      totalFluxErr [nJy] 32-bit float
      filterName         string

Where the:
    * fiberFlux corresponds to the integrated flux within an aperture of a fiber 
        (approx 1 arcsec in diameter). This is seeing-corrected.
    * psfFlux is the flux computed by fitting the appropriate PSF to the image, 
        to an infinite radius. 
    * totalFlux is the complete flux for that object. This is the same as the psfFlux
        for unresolved sources, but for extended sources the appropriate extended model
        is applied to compute the flux.


A fiberId may be listed multiple times in the PHOTOMETRY table in order to
provide measurements in multiple filters for a single object.

The 'filterName' values in the PHOTOMETRY table will specify particular
transmission curves used by the pipeline, and therefore the range of
permitted values is limited to a set to be specified by the DRP team.
There will be a mechanism for adding to this set.

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

The realisation of a PfsDesign for a particular exposure is a PfsConfig.
The most important differences from PfsDesign are that the actual fiber
positions and object photometry are recorded for use in the DRP.

    "pfsConfig-0x%016x-%06d.fits" % (pfsDesignId, visit0)

The choice of a hex format is because the the pfsDesignId is a SHA-1.

FITS file format:

HDU #0 PDU
HDU #1          FITS binary table named "CONFIG"
HDU #1          FITS binary table named "PHOTOMETRY"

The PDU has keys indicating the actual pointing of the telescope boresight.

      RA        Actual telescope boresight Right Ascension (degrees).
      DEC       Actual telescope boresight Declination (degrees).

The CONFIG table lists for each object:
      fiberId        32-bit int
      catId          32-bit int
      tract	         32-bit int
      patch          string
      objId          64-bit int
      ra             64-bit float (degrees)
      dec            64-bit float (degrees)
      targetType     32-bit int (enumerated type: SCIENCE,SKY,FLUXSTD,UNASSIGNED,ENGINEERING)
      fiberStatus    32-bit int (enumerated type: GOOD,BROKENFIBER,BLOCKED,BLACKSPOT,UNILLUMINATED)
      pfiCenter      pair of 32-bit floats (microns on the PFI)
      pfiNominal     pair of 32-bit floats (microns on the PFI)

(I.e., the same as for PfsDesign, except for the addition of the
"pfiCenter" column.)

The 'targetType' and 'fiberStatus' in the CONFIG table are the same enumerated
types as in the PfsDesign.

The PHOTOMETRY table is the same as for the PfsDesign.

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

Reduced but not combined single spectra from a single exposure (wavelength calibrated but not flux-calibrated)

   "pfsArm-%06d-%1s%1d.fits" % (visit, arm, spectrograph)

N.b. visit numbers are only unique at a site, but we don't preserve this in derived product names.  There will
keywords in the header to disambiguate this.

The file will have several HDUs:

HDU #0 PDU
HDU #1 FIBERID      Fiber identifier                        [32-bit INT]    NROW*NFIBER
HDU #2 WAVELENGTH   Wavelength (nm, vacuum)                 [FLOAT]         NROW*NFIBER
HDU #3 FLUX         Flux (arbitrary units)                  [FLOAT]         NROW*NFIBER
HDU #4 MASK         Pixel mask                              [32-bit INT]    NROW*NFIBER
HDU #5 SKY          Sky flux                                [FLOAT]         NROW*NFIBER
HDU #6 COVAR        Near-diagonal part of flux covariance   [FLOAT]         NROW*3*NFIBER
HDU #7 CONFIG       Identification of the exposure          [BINARY TABLE]

Note that the data need not be resampled onto a uniform grid, as a wavelength is provided for each pixel.

The COVAR data contains the diagonal COVAR[fiberId][0][0:]
                            +-1      COVAR[fiberId][1][0:-1]
and
                            +-2      COVAR[fiberId][2][0:-2]
terms in the covariance matrix.

At a minimum the CONFIG table contains columns for pfsDesignId and visit (and only one row!  But it's
a table not header keywords for consistency with the pfsObject file).

It would be possible to denormalise additional information about the observation into this HDU.  I do not
know if it should also contain things we've learned about the observation from the analysis that created
this file;  I'd be inclined to put it in a separate temporary file, and then build a single file describing
the entire PFS from the 12 temporaries.  Alternatively, this could be done at the database level.

Note that the pfsFiberTrace file contains enough information to recover the raw counts
from the arbitrary units used for the flux, and the widths of the fiber traces.

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

The sky model for a single exposure

   "pfsSky-%06d-%1s%1d.fits" % (visit, arm, spectrograph)

Format: TBD

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

The PSF for a single exposure

   "pfsPSF-%06d-%1s%1d.fits" % (visit, arm, spectrograph)

Format: TBD

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

Combined spectra.

In SDSS we used "spPlate" files, named by the plugplate and MJD of observation but this is not suitable for
PFS where we:
  1.  Will split observations of the same object over multiple nights
  2.  Will potentially reconfigure the PFI between observations.

I don't think it makes sense to put multiple spectra together based on sky coordinates as we may go back and
add more observations later, so I think we're forced to separate files for every object.  That's a lot of
files, but maybe not too bad?  We could use a directory structure based on HSC's (tract, patch) -- note that
these are well defined even if we are not using HSC data to target.  An alternative would be to use a
healpix or HTM id.

Because we may later obtain more data on a given object, or decide that some data we have already taken is
bad, or process a number of subsets of the available data, there may be more than one set of visits used
to produce a pfsObject file for a given object.  We therefore include both the number of visits (nVisit)
and a SHA-1 hash of the visits, pfsVisitHash.  We use both as nVisits may be ambiguous, while pfsVisitHash
isn't human-friendly;  in particular it doesn't sort in a helpful way.  It seems improbable that we will
ever have more than 1000 visits, but as the pfsVisitHash is unambiguous it seemed safer to only allow for
larger values of nVisit, but record them only modulo 1000.

     "pfsObject-%05d-%05d-%s-%016x-%03d-0x%016x.fits"
         % (catId, tract, patch, objId, nVisit % 1000, pfsVisitHash)

The path would be
   catId/tract/patch/pfsObject-*.fits

The file will have several HDUs:

HDU #0 PDU
HDU #1 FLUX        Flux in units of nJy                           [FLOAT]        NROW
HDU #2 MASK        Pixel mask                                     [32-bit INT]   NROW
HDU #3 TARGET      Binary table                                   [FITS BINARY TABLE] NFILTER
          Columns for:
          filterName                                  [STRING]
          fiberFlux                                   [FLOAT]
HDU #4 SKY         Sky flux in same units as FLUX                 [FLOAT]        NROW
HDU #5 COVAR       Near-diagonal part of FLUX's covariance        [FLOAT]        NROW*3
HDU #6 COVAR2      Low-resolution non-sparse estimate covariance  [FLOAT]        NCOARSE*NCOARSE
HDU #7 OBSERVATIONS    Binary table                               [FITS BINARY TABLE] NOBS
          Columns for:
          visit                                       [32-bit INT]
          arm                                         [STRING]
          spectrograph                                [32-bit INT]
          pfsDesignId                                 [64-bit INT]
          fiberId                                     [32-bit INT]
          nominal PFI position (microns)              [FLOAT]*2
          actual PFI position (microns)               [FLOAT]*2
HDU #8 FLUXTABLE   Binary table                                   [FITS BINARY TABLE] NOBS*NROW
          Columns for:
		      wavelength in units of nm (vacuum)          [FLOAT]
		      intensity in units of nJy                   [FLOAT]
		      intensity error in same units as intensity  [FLOAT]
		      mask                                        [32-bit INT]

The wavelengths are specified via the WCS cards in the header (e.g. CRPIX1,
CRVAL1) for the FLUX, MASK, SKY, COVAR extensions and explicitly in the table
for the FLUXTABLE.  We chose these two representations for the data due to the
difficulty in resampling marginally sampled data onto a regular grid,  while
recognising the convenience of such a grid when rebinning, performing PCAs, or
stacking spectra.  For highest precision the data in the FLUXTABLE is likely to
be used.

The TARGET HDU must contain at least the keywords
    catId       Catalog identifier         INT
    tract       Tract identifier           INT
    patch       Patch identifier           STRING
    objId       Object identifier          INT
    ra          Right Ascension (degrees)  DOUBLE
    dec         Declination (degrees)      DOUBLE
    targetType  Target type enum           INT

(N.b. the keywords are case-insensitive).  Other HDUs should specify INHERIT=T.

See pfsArm for definition of the COVAR data

What resolution should we use for HDU #1?  The instrument has a dispersion per pixel which is roughly constant
(in the blue arm Jim-sensei calculates that it varies from 0.70 to 0.65 (going red) A/pix; in the red, 0.88 to
0.82, and in the IR, 0.84 to 0.77).  We propose that we sample at 0.8 A/pixel.

The second covariance table (COVAR2) is the full covariance at low spectral resolution, maybe 10x10. It's
really only 0.5*NCOARSE*(NCOARSE + 1) numbers, but it doesn't seem worth the trouble to save a few bytes.
This covariance is needed to model the spectrophotometric errors.

Note that we don't keep the SDSS "AND" and "OR" masks -- if needs be we could set two mask bits to capture
the same information, but in practice SDSS's OR masks were not very useful.

For data taken with the medium resolution spectrograph, HDU #1 is expected to be at the resolution of
the medium arm, and to omit the data from the blue and IR arms.

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

Line-spread functions

The line-spread function (LSF) is the response of the spectrograph to a single
narrow line; it is the one-dimensional equivalent of the point-spread function
(PSF).

The datamodel representation for the LSF has not yet been settled. However, they
are temporarily represented as python pickles of instances of classes defined in
drp_stella (subclasses of pfs.drp.stella.Lsf; see the docstrings for API
details) so that they can be used in the mean time.

The LSFs will be saved to:
    "pfsArmLsf-%06d-%1s%1d.pickle" % (visit, arm, spectrograph)
    "pfsMergedLsf-%06d.pickle" % (visit,)
    "pfsSingleLsf-%05d-%05d-%s-%016x-%06d.pickle" % (catId, tract, patch, objId, visit)
    "pfsObjectLsf-%05d-%05d-%s-%016x-%03d-0x%016x.pickle" % (catId, tract, patch, objId, nVisit, pfsVisitHash)

These correspond to the corresponding FITS product without the "Lsf", e.g.
    "pfsArm-%06d-%1s%1d.fits" % (visit, arm, spectrograph)

The pickle files can be read in python using the following function:

    def readLsfPickle(filename):
        """Read the line-spread function from a pickle file"""
        import pickle
        import pfs.drp.stella  # Load class definitions
        with open(filename, "rb") as fd:
            return pickle.load(fd)

This will return either a single Lsf object (for pfsSingleLsf and pfsObjectLsf
files) or a python dictionary of Lsf objects, indexed by fiberId (in the case of
pfsArmLsf and pfsMergedLsf files).

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

Pixel mask values

We use bit masks to flag pixels in the images and spectra. The bit masks have
symbolic names that are recorded in the FITS headers with a prefix "MP_" (or
"HIERARCH MP_" for longer names), and a value equal to the power of two for the
corresponding value. For example, "MP_FOO = 5" would mean that the symbolic name
"FOO" has the corresponding value of 0x00000020.

The meanings of the symbolic names are:

BAD: the pixel is a known bad pixel
SAT: the pixel was saturated
INTRP: the pixel has been interpolated
CR: the pixel is believed to be affected by a cosmic ray
EDGE: the pixel is close to the edge of the image (from LSST; not relevant for PFS)
DETECTED: the pixel has a positive value over threshold (from LSST; not relevant for PFS)
DETECTED_NEGATIVE: the pixel has a negative value over threshold (from LSST; not relevant for PFS)
SUSPECT: the pixel is suspected to be non-linear
NO_DATA: there are no good value for this value
UNMASKEDNAN: the pixel contained a NAN
BAD_FLAT: the pixel is bad in the flat
FIBERTRACE: the pixel is part of a fiber trace
BAD_SKY: the pixel is bad in the sky model
BAD_FLUXCAL: the pixel is bad in the flux calibration
OVERLAP: the pixel is part of a wavelength overlap (dichroic)


-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

Simulations

We need to specify a format for the spectra going into the simulator.  At first glance we could adopt the
pfsObject file, along with a pfsDesign file to map them to the sky.  This would work, but there is a problem
with resolution, in particular emission lines.  Also, the resolution of the pfsObject files for
medium-resolution spectra may be different from that for low-resolution (extra-galactic) spectra (and the
simulators are probably not interested in covariances and masks)

The PSF of an extracted emission line is not the same as the marginal shape of the fibre spot, and I don't
think that the simulators want to know the details of the spectrograph anyway!  This leads us to going to
higher resolution, and this would be possible (e.g. R ~ 1e4?).  An alternative would be to provide the
continuum spectrum as an array, possibly even at PFS's resolution and an additional table of (lambda,
amplitude, width) for emission lines.  Will a continuum + lines model like this work for the Galactic
evolution stellar spectra?

For now, I propose:
     "pfsSimObject-%05d-%05d-%s-%016x.fits" % (catId, tract, patch, objId)

The tract, patch, catId, objId values will also be available as header keywords.

The file will have two HDUs:

HDU #0 PDU
HDU #1             Flux in units of nJy     	   	       [FLOAT]        NSIMROW
HDU #2 WAVELENGTH  Wavelength solution in nm (vacuum)	       [FLOAT] 	      NSIMROW

The simulation team will also need to provide a matching pfsDesign file, and may well choose to set
   tract, patch = 0, "0,0"
The catId/objId is only needed to allow the set of pfsSimObject files and a pfsDesign file to specify a
set of simulated exposures.

Note that the wavelength need not be uniformly sampled.

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

Redshift candidates


According to the "combined spectra" data model we include both the number of
visits (nVisit) and a SHA-1 hash of the visits, pfsVisitHash.

I propose :
		"pfsZcandidates-%05d-%05d-%s-%016x-%03d-0x%016x.fits"
        % (catId, tract, patch, objId, nVisit % 1000, pfsVisitHash)

The path would be
   tract/patch/pfsZcandidate-*.fits

The file will have several HDUs:

HDU#0 PDU

HDU#1 ZCANDIDATES               Binary table            [FITS BINARY TABLE]     NCANDIDATE
        Colums for :
        Z                       FLOAT                   Redshift
        Z_ERR                   FLOAT                   Redshift error
        ZRANK                   INT32                   Rank of redshift candidate ( best = 1 )
        RELIABILITY             FLOAT                   Area of the PDF peak (dz=+/-3.e-3)
        CLASS                   STR                     Spectro classification: GALAXY, QSO, STAR
        SUBCLASS                STR                     Subclassifications
        MODELFLUX               FLOAT[NROW]             Spectrum model (unit: nJy)

HDU#2 MODELWL                   Binary table            [FITS BINARY TABLE]     NROW
        Columns for :
        WAVELENGTH              FLOAT                   Wavelength scale (unit: nm)

HDU#3 ZPDF                      Binary table            [FITS BINARY TABLE]     NPIX
        Colums for :
        REDSHIFT                FLOAT                   Redshift scale
        PDF                     FLOAT                   PDF marginalised over all models

HDU#4 ZLINES                    Binary table            [FITS BINARY TABLE]     NLINE
        Columns for :
        LINENAME                STR                     Line name
        LINEWAVE                FLOAT                   Catalog wavelength for this line in vacuum (unit: nm)
        LINEZ                   FLOAT                   Redshift
        LINEZ_ERR               FLOAT                   Redshift error
        LINESIGMA               FLOAT                   Gaussian width (unit: nm)
        LINESIGMA_ERR           FLOAT                   Error in gaussian width
        LINEVEL                 FLOAT                   Gaussian width (unit: km/sec)
        LINEVEL_ERR             FLOAT                   Error in gaussian width
        LINEFLUX                FLOAT                   Area in gaussian fit (unit: erg/cm^2/s)
        LINEFLUX_ERR            FLOAT                   Flux error
        LINEEW                  FLOAT                   Equivalent width (unit: nm)
        LINEEW_ERR              FLOAT                   Equivalent width error
        LINECONTLEVEL           FLOAT                   Continuum level at line center (unit: nJy)
        LINECONTLEVEL_ERR       FLOAT                   Error in continuum level at line center



-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-


			Example File Names
			------------------

 PFSA00066611.fits
	Raw science exposure, visit 666, taken on the summit with spectrograph 1 using the blue arm
 PFLB00123423.fits
	Raw up-the-ramp exposure, visit 1234, taken at LAM with spectrograph 2 using the IR arm

 pfsDesign-0xad349fe21234abcd.fits
	The fiber and targetting information for the PFI configuration with hash 0xad349fe21234abcd

 pfsFlat-2019-08-29-000333-m2.fits
	Flat for spectrograph 2, medium resolution arm, from 2019-08-29, valid for 333 <= visit < ??
 pfsBias-2019-08-29-000333-r1.fits
	Bias for spectrograph 1, red arm
 pfsBias-2019-08-29-000333-m1.fits
	Bias for spectrograph 1, medium resolution arm (identical to pfsBias-2019-08-29-000333-1r.fits)
 pfsDark-2019-08-29-000333-b3.fits
	Dark for spectrograph 3, blue arm
 pfsFiberTrace-2019-08-29-000333-n2.fits
	Fiber traces for spectrograph 2, IR arm

 pfsArm-000666-b1.fits
	Extracted spectra for visit 666, from spectrograph 1's blue arm
 pfsPSF-000666-b1.fits
	The 2-D PSF for spectrograph 1's blue arm in visit 666

 pfsObject-001-07621-2,2-02468ace1234abcd-003-0x1234abcddeadbeef.fits
	Combined spectrum for HSC (the "001") object 0x02468ace1234abcd, located in tract 7621, patch 2,2.

	The pfsVisitHash SHA-1 (calculated from the 3 visits included in this reduction) is 0x1234abcddeadbeef.

 pfsSimObject-000-00000-0,0-13579bdf1234abcd.fits
	A simulated spectrum (the "000") for object 0x13579bdf1234abcd, located in tract 0, patch 0,0

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

			Parameters
			----------

The raw CCD images will have:
    NAMP=8
    AMPCOLS=520
    CCDROWS=4224

    OVERROWS = 76 # as of 2016-02-01
    OVERCOLS = 32 # as of 2016-02-01

    LEADINROWS = 48 # necked rows
    LEADINCOLS  = 8 # real leadin pixels

So the raw CCD data will have
    NROW = 4300 #  CCDROWS + OVERROWS
    NCOL = 4416 # NAMP*(AMPCOLS + OVERCOLS)

And the ISR-extracted CCD images will probably be close to:
    NROW = 4176  # CCDROWS - LEADINROWS
    NCOL = 4096  # NAMP*(AMPCOLS - LEADINCOLS)
This value of NROW is applicable to the pfsArm files.

The raw H4RG images will be in the range
    NROW = 4096 to 8192
    NCOL = 4096
(n.b. there's a 4-pixel reference pixel border)

The ISR-extracted H4RG images will be no bigger than
    NROW = 4088
    NCOL = 4088

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

			Open Questions and TBD
			----------------------

	Pin down the HDUs in pfsArm files

	Specify more details about expected header keywords

	Provide examples of all these files

	Decide where to put information about the analysis resulting in pfsArm files

	Define the 1-D outputs

	Define pfsObject files for medium resolution data

	Consider using healpix or HTM ID not tract/patch

	Do we need to save the covariance of the wavelength solution

	Should we save the per-pfsDesignId combined spectra?  Note that this is doable within
	my naming scheme now we have added a pfsVisitHash and an nVisit field

	Reruns in directory tree, and also headers of course

	DB of bad visits

	Define format of pfsPSF files.  Choosing a better name is probably hopeless

	Need a DB (as well as the butler) to map visit to visit0 for calibration products

	Do we want to model the sky over the entire exposure?  I put in a place holder that is
	per spectrograph/arm but it isn't obvious that this is correct.  E.g. there's spatial
	structure over the whole focal plane, and the lines in the red and IR are closely related.

	Think of a better name than NCOARSE

	Do we really want HDU #1 (rebinned spectra) in medium-resolution pfsObject files to
	omit the blue and IR data?
